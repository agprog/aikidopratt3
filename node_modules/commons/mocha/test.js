var crypto=require('crypto');
var sha1=crypto.createHash('sha1');
var assert = require('assert');
var fs=require('fs');
var config = require('../../../config');
var testFile=require('../index');

describe('Test du module commons',function(){
    before(function(done){
		
        /*mongoose.connect(config.db.server+'/'+config.db.dbname);*/
        done();
    });
    describe('Test de la fonction _createStaticPath',function(){
        var dir1=['admin'];
        var tab1='js';
        var attempt_results1='doit retourner /admin/admin.js (1)\
                                            /dir_one/dir_two/js (2)'
        it(attempt_results1,function(){
            assert.equal("js/admin/admin.js",testFile.createStaticPath(dir1,tab1)[0]);
            assert.equal("js/admin/controllers.js",testFile.createStaticPath(dir1,tab1)[1]);
        });
        
        
    });
    describe('Test de la fonction csrf_check',function(){
		var req_false0={hostname : 'agprog.net',
						headers : {'user-agent':'Mozilla'},
						body : {csrf_token :''},
						sessionStore : {csrf_value : ''}
						};
						
		var req_true = {hostname : 'agprog.net',
					headers : {'user-agent':'Mozilla'},
					body : {csrf_token :''},
					sessionStore : {csrf_value : ''}
					};
		/* cree les valeurs de contexte */
		var contexte=testFile.contextCreate(req_true,'admin');
		/* calcule la cle cote server stockee en session a partir du csrf_token genere par le contexte */
		var shavalue=sha1.update(req_true.hostname+req_true.headers['user-agent']+contexte.csrf_token+config.SALT).digest('hex');
		/* stocke la valeur dans la variable de session */	
		req_true.sessionStore.csrf_value=shavalue;
		req_false0.sessionStore.csrf_value=shavalue;
		/* rempli la variable csrf_token vraie provenant du contexte */
		req_true.body.csrf_token=contexte.csrf_token;
		/* rempli la variable par une mauvaise valeur, tentative de fixation de session */
		req_false0.body.csrf_token=config.csrf_token;
		it('doit initialiser les valeurs de contexte',function(){
			/*!*** verification del'intialisation de la session check csrf ok*** */
			assert.equal(true,testFile.csrf_check(req_true));
			/*!*** verification de l'intialisation de la session check csrf fail*** */
			assert.equal(false,testFile.csrf_check(req_false0));
		});
	});
	describe('Test de la fonction d\'upload',function(){
		before(function(done){
			var to   = config.ROOT_DIR+"/tmp";
			var upload_test_dir=__dirname+"/files/upload";
			var files=fs.readdirSync(__dirname+"/files/start");
			var req;
			for(var i=0;i<files.length;i++){
				
				/*! on copie les fichiers du repertoire vers le repertoire 
				 * temporaire pour simuler un upload */

				var datas=fs.readFileSync(__dirname+"/files/start/"+files[i]);
				fs.writeFileSync(to+'/'+files[i],datas);
				/* On cree la requete file */
				req={path:to+'/'+files[i],
					originalname:files[i]
					};
				testFile.upload(req,'',upload_test_dir);
			}
			setTimeout(function(){done();},1500);
		});//fin before
		/* **** MISE EN PLACE DES TEST *****/
		it('doit trouver dans le repertoire de test upload deux fichiers essai0.txt et essai1.txt',function(){
			var files=fs.readdirSync(__dirname+"/files/upload");
			assert.equal('essai0.txt',files[0]);
			assert.equal('essai1.txt',files[1]);
		});
	});// FIN DESCRIBE
	describe('Test de la fonction create_dir',function(){
		var rep1,rep2;
		before(function(done){
			rep1=__dirname+"/files/test";
			rep2=__dirname+"/files/test/test";
			setTimeout(function(){done();},1500);
		});
		
		it("cree un repertoire de test lorqu'il n'existe pas",function(){
			testFile.create_dir(rep1);
			testFile.create_dir(rep2);
		});
		it("efface le repertoire de test lorsqu'il existe",function(){
			for(var i;i<2;i++){
				var datas=fs.readFileSync(__dirname+"/files/start/"+files[i]);
				fs.writeFileSync(rep1+'/'+files[i],datas);
				fs.writeFileSync(rep2+'/'+files[i],datas);
			}
			testFile.delete_dir(rep1);
		}); 
		
	});
	/*!----- On efface les fichiers qui restent dans mocha/files/upload ----*/
	after(function(done){
		var files=fs.readdirSync(__dirname+"/files/upload");
		for(var i=0;i<files.length;i++){
			fs.unlink(__dirname+"/files/upload/"+files[i]);
		}
		done();
	});
	
});

